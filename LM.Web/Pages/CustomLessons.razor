@page "/custom"
@inherits CustomLessonsBase
@using Microsoft.AspNetCore.WebUtilities

<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#lessonBuilder">
    New lesson
</button>

@{
    if (UserDecks.Count == 0)
    {
        <p class="d-flex justify-content-center">You have no decks.  You should make one maybe</p>
    }
    else
    {
        <div class="d-flex flex-row flex-wrap justify-content-around">
            @{
                int j = 0;
                foreach (LM.Models.Deck deck in UserDecks)
                {
                    <div class="card m-3" style="max-width: 230px; min-width: 230px;">
                        <div class="card-header">
                            @deck.Name
                            <button type="button" class="close" aria-label="Delete" @onclick="() => { DeleteDeck(j++); }">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="card-img-top text-center">
                            <img class="card-img" src="/images/deck.png" style="max-width: 175px; max-height: 200px;" />
                        </div>
                        <div class="card-footer text-center">
                            @{
                                var continueArgs = new Dictionary<string, string>
                                {
                                    { "type", "customLesson" },
                                };

                                if (deck.Progress > 0)
                                {
                                    <a href="@QueryHelpers.AddQueryString("/lessons/" + deck.Id, continueArgs)" class="btn btn-primary m-1">Continue</a>

                                    var restartArgs = new Dictionary<string, string>
                                    {
                                        { "type", "customLesson" },
                                        { "reset", "true" },
                                    };
                                    <a href="@QueryHelpers.AddQueryString("/lessons/" + deck.Id, restartArgs)" class="btn btn-primary m-1">Restart</a>
                                }
                                else
                                {
                                    <a href="@QueryHelpers.AddQueryString("/lessons/" + deck.Id, continueArgs)" class="btn btn-primary m-1">Start</a>
                                }

                                var practiceArgs = new Dictionary<string, string>
                                {
                                    { "type", "customPractice" },
                                };
                                <br />
                                <a href="@QueryHelpers.AddQueryString("/lessons/" + deck.Id, practiceArgs)" class="btn btn-primary m-1">Practice</a>
                            }
                        </div>
                    </div>
                }
            }
        </div>
    }
}

<div class="modal" id="lessonBuilder" tabindex="-1" role="dialog" aria-labelledby="lessonBuilderLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Lesson builder</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="deckbuilderbox" class="d-flex mt-5">
                    <div class="col-7">
                        @{
                            <div class="input-group mb-3">
                                <div class="input-group-prepend">
                                    <span class="input-group-text" id="basic-addon1">Deck name</span>
                                </div>
                                <input type="text" value="@DeckName" @oninput="(e) => { DeckName = e.Value.ToString(); }"
                                       class="form-control" aria-label="Username" aria-describedby="basic-addon1">
                            </div>
                            int i = 0;
                            <h5>Letters</h5>
                            <div class="d-flex flex-row flex-wrap">
                                @{
                                    foreach (string card in MasterCharDeck)
                                    {
                                        <img id="card@(i)" style="max-width: 75px; max-height:100px;"
                                             src="/images/@(card)_back.png"
                                             @onclick="() => { AddCharToDeck(card); }" />
                                        i++;
                                    }
                                }
                            </div>
                            <h5 class="mt-2">Numbers</h5>
                            <div class="d-flex flex-row flex-wrap">
                                @{
                                    foreach (string card in MasterNumDeck)
                                    {
                                        <img id="card@(i)" style="max-width: 75px; max-height:100px;"
                                             src="/images/@(card)_back.png"
                                             @onclick="() => { AddNumToDeck(card); }" />
                                        i++;
                                    }
                                }
                            </div>
                        }
                    </div>
                    <div class="col-5 pl-5">
                        <div class="d-flex flex-row justify-content-between align-items-center">
                            <h4>Deck Cards <span style="font-size: medium;">(max 6)</span></h4>
                            <br />
                            @{
                                if (CustomDeck.Count > 0)
                                {
                                    <div class="btn btn-primary" @onclick="RemoveAllFromDeck">Remove All</div>
                                }
                            }
                        </div>
                        @{
                            foreach (string card in CustomDeck)
                            {
                                <img style="max-width: 75px; max-height: 100px;"
                                     src="/images/@(card)_back.png"
                                     @onclick="() => { RemoveFromDeck(card); }" />
                            }
                        }
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                @{
                    if (CustomDeck.Count > 0)
                    {
                        <div class="btn btn-primary" data-dismiss="modal" @onclick="CreateDeck">Create</div>
                    }
                }
            </div>
        </div>
    </div>
</div>
